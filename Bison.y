%{
	#include<iostream>
	#include<stdio.h>
	#include<string.h>
	extern int yylex();
	extern int yyparse();
	extern FILE *yyin;
	void yyerror(const char* s);
%}
%union{
char* sval;
}
%token <sval> DIRECTIVE STRING KEYWORD IDENTIFIER SEPARATOR CHARACTER CONSTANT ASSIGNMENT OP OP_2 INCREMENT DECREMENT BOOLEAN_OP COMPARISON SEPARATOR_2 CONTINUE_BREAK FUNCTION WRITE_READ_COMMAND RETURN_TYPE
%type <sval> S VALUE RETURN X DECLARATIONS VALUE_ASSIGN ARITHMETIC WRITE_READ WRITE_READ_2 INCREMENT_DECREMENT INCREMENT_DECREMENT_2 FUNC FUNC_2 FUNC_3 IF_UNTIL CONDITION CONDITION_2 FOR FOR_2 FOR_3 FUNC_CALL
%left '+' '-' 
%left '*' '/'
%%
S : DIRECTIVE STRING S
| RETURN S
| DECLARATIONS S 
| VALUE_ASSIGN S
| /* */ 
| WRITE_READ S
| INCREMENT_DECREMENT S
| FUNC S
| IF_UNTIL S
| FOR S
| SEPARATOR_2 S
| CONTINUE_BREAK SEPARATOR S
| FUNC_CALL S

FUNC_CALL : IDENTIFIER SEPARATOR SEPARATOR SEPARATOR
| IDENTIFIER SEPARATOR IDENTIFIER SEPARATOR SEPARATOR 
| IDENTIFIER SEPARATOR STRING SEPARATOR SEPARATOR
| IDENTIFIER SEPARATOR CONSTANT SEPARATOR SEPARATOR
| IDENTIFIER SEPARATOR CHARACTER SEPARATOR SEPARATOR

FOR : KEYWORD SEPARATOR FOR_2
FOR_2 : IDENTIFIER ASSIGNMENT CONSTANT SEPARATOR FOR_3
| IDENTIFIER ASSIGNMENT IDENTIFIER SEPARATOR FOR_3
FOR_3 : CONDITION INCREMENT_DECREMENT

IF_UNTIL : KEYWORD SEPARATOR CONDITION 
| KEYWORD KEYWORD SEPARATOR CONDITION {
		if(strstr($1,"if") != NULL && strstr($1,"else") != NULL && strstr($2,"if") != NULL){}
		else 
		{
			yyerror("Syntax Error");
		}
	}
CONDITION : IDENTIFIER COMPARISON CONSTANT CONDITION_2 
| IDENTIFIER COMPARISON IDENTIFIER CONDITION_2
CONDITION_2 : BOOLEAN_OP CONDITION | SEPARATOR



FUNC : FUNCTION SEPARATOR KEYWORD SEPARATOR FUNC_2
FUNC_2 : IDENTIFIER SEPARATOR FUNC_3 SEPARATOR
FUNC_3 : /* */ | KEYWORD SEPARATOR IDENTIFIER 


INCREMENT_DECREMENT : IDENTIFIER INCREMENT_DECREMENT_2
INCREMENT_DECREMENT_2 : INCREMENT SEPARATOR | DECREMENT SEPARATOR

ARITHMETIC : CONSTANT OP ARITHMETIC | CHARACTER | STRING
| IDENTIFIER OP ARITHMETIC | IDENTIFIER | CONSTANT

VALUE_ASSIGN : IDENTIFIER X ASSIGNMENT ARITHMETIC SEPARATOR 
| IDENTIFIER ASSIGNMENT ARITHMETIC SEPARATOR

WRITE_READ : WRITE_READ_COMMAND SEPARATOR WRITE_READ_2
WRITE_READ_2 : IDENTIFIER SEPARATOR SEPARATOR {
	if(strstr($2,")") != NULL && strstr($2,";") != NULL) {}
	else yyerror("Syntax Error");
	} 
| STRING SEPARATOR SEPARATOR {
	if(strstr($2,")") != NULL && strstr($2,";") != NULL) {}
	else yyerror("Syntax Error");
	}
| IDENTIFIER SEPARATOR WRITE_READ_2
| STRING SEPARATOR WRITE_READ_2

DECLARATIONS : KEYWORD X SEPARATOR IDENTIFIER SEPARATOR
| KEYWORD SEPARATOR IDENTIFIER SEPARATOR


RETURN : RETURN_TYPE VALUE SEPARATOR
| RETURN_TYPE IDENTIFIER SEPARATOR


VALUE : CONSTANT | IDENTIFIER X  | STRING
X : SEPARATOR CONSTANT SEPARATOR


%%
int main()
{
FILE *file = fopen("Source_File(Syntax Error).ANP","r");
if(!file)
{
std::cout<<"File cannot open"<<std::endl;
return -1;
}
yyin = file;
yyparse();
std::cout<<"Parsing Successful"<<"\n";
}
void yyerror(const char* s)
{
   std::cout<<s<<std::endl;
   exit(-1);
}